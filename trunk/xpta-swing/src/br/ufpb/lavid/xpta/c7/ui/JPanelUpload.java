/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJPanel.java
 *
 * Created on 08/07/2010, 08:43:13
 */

package br.ufpb.lavid.xpta.c7.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileFilter;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author rennan
 */
public class JPanelUpload extends javax.swing.JPanel {

    private LinkedList<JPanelTrack> panelTracks = JPanelTrack.getInstances();
    private static final int  tracksStart = 60;
    private static int redLine = 415;
    private boolean playing = false;
    static {
        new File("Tracks").mkdir();
    }
    /** Creates new form NewJPanel */
    public JPanelUpload() {
        initComponents();
        JPanelTrack.setBase(tracksStart);
        updateTrackList();
    }

    public void addTrack(String trackName){
        JPanelTrack jpt = new JPanelTrack(trackName);
        add(jpt);
        add(new JLabelWaveForm(jpt));
        jpt.setBackground(new Color(panelTracks.size()*83%255, panelTracks.size()*151%255, panelTracks.size()*203%255));
    }

    @Override
    public Dimension getPreferredSize() {
        if(panelTracks.size() == 0)
            return new Dimension(415, tracksStart);
        return new Dimension(panelTracks.get(0).getWidth() + 700, tracksStart + panelTracks.size()*panelTracks.get(0).getHeight());
    }

    public void updateTrackList() {
        String[] files = new File("Tracks").list(new MusicFilenameFilter());
//        String[] files = {"aaa", "bbb"};
        String[] list = new String[files.length+1];
        list[0] = "[Escolha uma Track]";
        System.arraycopy(files, 0, list, 1, files.length);
        jComboBox1.setModel(new DefaultComboBoxModel(list));
    }

    private class MusicFilenameFilter implements FilenameFilter {

        public boolean accept(File dir, String name) {
            if(name.endsWith(".wav") || name.endsWith(".mp3"))
                return true;
            return false;
        }

    }

    private class MusicFileFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            String name = f.getName();
            if(f.isDirectory() || name.endsWith(".wav") || name.endsWith(".mp3"))
                return true;
            return false;
        }

        @Override
        public String getDescription() {
            return "Arquivos de musica (*.mp3, *.wav)";
        }
        
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        g.setColor(Color.red);
        g.drawLine(redLine, 60, redLine, 2000);
        if(playing) {
            redLine++;
        }
    }

    public static int getRedLine() {
        return redLine;
    }

    


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonPlayPause = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();

        setLayout(null);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        add(jComboBox1);
        jComboBox1.setBounds(160, 2, 250, 27);

        jButton1.setText("Upload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(0, 0, 88, 29);

        jLabel1.setText("Adicionar:");
        add(jLabel1);
        jLabel1.setBounds(98, 5, 70, 16);

        jButtonPlayPause.setText("Play");
        jButtonPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayPauseActionPerformed(evt);
            }
        });
        add(jButtonPlayPause);
        jButtonPlayPause.setBounds(5, 30, 200, 29);

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        add(jButtonStop);
        jButtonStop.setBounds(205, 30, 200, 29);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if(jComboBox1.getSelectedIndex() > 0) {
            addTrack((String) jComboBox1.getSelectedItem());
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButtonPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayPauseActionPerformed
        if(jButtonPlayPause.getText().equals("Play")) {
            int cont = 1;
            for(JPanelTrack t : panelTracks) {
                t.getTrack().resume();
            }
            playing = true;
            jButtonPlayPause.setText("Pause");
        } else {
            for(JPanelTrack t : panelTracks)
                t.getTrack().pause();
            playing = false;
            jButtonPlayPause.setText("Play");
        }
    }//GEN-LAST:event_jButtonPlayPauseActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        for(JPanelTrack t : panelTracks)
            t.getTrack().stop();
        playing = false;
        redLine = 415;
        JPanelTrack.setSolo(null);
        jButtonPlayPause.setText("Play");
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileFilter(new MusicFileFilter());
        if(jfc.showOpenDialog(jButton1) == JFileChooser.APPROVE_OPTION) {
            File newTrack = jfc.getSelectedFile();
            File newFile = new  File("Tracks/"+newTrack.getName());
            try {
                FileUtils.copyFile(newTrack, newFile);
            } catch (IOException ex) {}
            updateTrackList();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String[] args) throws InterruptedException {
        JFrame jFrame = new JFrame();
        jFrame.add(new JPanelUpload());
        jFrame.pack();
        jFrame.setVisible(true);
        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        while(true) {
            Thread.sleep(500);
            jFrame.pack();
            jFrame.repaint();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonPlayPause;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
